apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: dev-environment
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftTemplate
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    failedBuildsHistoryLimit: 1
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: ${BUILDER_IMAGE}:${BUILDER_IMAGE_VERSION}
          namespace: ${BUILDER_IMAGE_NAMESPACE}
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: ${WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${WEBHOOK_SECRET}
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${APP_NAME}", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: dev-${APP_NAME}-pipeline
      app: ${APP_NAME}
    name: dev-${APP_NAME}-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          // define commands
          def mvnCmd = "mvn -s configuration/settings.xml"
          def inputRootUrl = "https://jenkins-${ENV_NAME}.${APP_DNS}/job/${ENV_NAME}-dev-${APP_NAME}-pipeline/"

          def notifySlack(text, channel, attachments) {
              def slackURL = '${SLACK_WEBHOOK_URL}'
              def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
              def slackChannel = '${SLACK_CHANNEL}'
              def payload = JsonOutput.toJson([text: text,
                  channel: channel,
                  username: "openshift",
                  icon_url: jenkinsIcon,
                  attachments: attachments
              ])
              sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
          }
          node('maven') {

            stage ('Build') {
              git branch: '${SOURCE_BRANCH}', url: '${SOURCE_REPOSITORY}'
              sh "${mvnCmd} clean install -DskipTests=true"
            }

            stage ('Test') {
              sh "${mvnCmd} test"
              step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
            }

            stage ('Analysis (Security, Bugs, etc)') {
              sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${SONARQUBE_URL} -DskipTests=true"
            }

            stage ('Push to Nexus - skipping') {
             //sh "${mvnCmd} deploy -DskipTests=true"
            }

            stage ('Deploy ${ENV_NAME}') {
              sh "rm -rf oc-build && mkdir -p oc-build/deployments"
              sh "cp target/*.*ar oc-build/deployments/"
              // create build. override the exit code since it complains about exising imagestream
              sh "oc start-build ${APP_NAME} --from-dir=oc-build --wait=true"
              def v = version()
              sh "oc tag ${APP_NAME}:latest ${APP_NAME}:${v}"
              notifySlack("[${APP_NAME}] - New build deployed to ${ENV_NAME}!", '${SLACK_CHANNEL}', [])
            }

            stage ('Deploy TEST') {
              notifySlack("[${APP_NAME}] - Build waiting approval for promotion to next environment. <"+inputRootUrl+env.BUILD_NUMBER+"/input|Approve>", 'jenkinsbuilds', [])
              timeout(time:15, unit:'MINUTES') {
                 input message: "Promote image to next environment?", ok: "Promote"
              }
              def v = version()
              // tag for stage
              sh "oc tag ${APP_NAME}:latest ${APP_NAME}:${PROMOTE_TAG}"
              notifySlack("[${APP_NAME}] - New build tagged for next environment.", 'jenkinsbuilds', [])
            }

          }
          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: ${WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${WEBHOOK_SECRET}
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: ''
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false
parameters:
- description: Application/Service name
  displayName: Service name
  name: APP_NAME
  required: true
- description: Environment name / project name
  displayName: Environment name
  name: ENV_NAME
  required: true
  value: dev
- description: Container image tag that is used to promote image to next environment like TEST
  displayName: Promote tag
  name: PROMOTE_TAG
  required: true
  value: totest
- description: Builder image for this application
  displayName: Builder image
  name: BUILDER_IMAGE
  required: true
- description: Builder image namespace
  displayName: Builder image namespace
  name: BUILDER_IMAGE_NAMESPACE
  required: true
  value: openshift
- description: Builder image version
  displayName: Builder image version
  name: BUILDER_IMAGE_VERSION
  required: true
  value: latest
- description: Source code branch to use
  displayName: Branch
  name: SOURCE_BRANCH
  required: true
  value: master
- description: Source code repository address
  displayName: Repository address
  name: SOURCE_REPOSITORY
  required: true
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: WEBHOOK_SECRET
- description: URL for slack webhook
  displayName: Slack webhook
  name: SLACK_WEBHOOK_URL
- description: Channel for Slack notifications
  displayName: Slack channel
  name: SLACK_CHANNEL
- description: Wildcard DNS for apps
  displayName: Wildcard DNS
  name: APP_DNS
- description: Service address for Sonarqube
  displayName: Sonarqube URL
  name: SONARQUBE_URL
